def min_operations_to_correct(S, grammar_rule):
    m = len(grammar_rule)
    n = len(S)

    # Initialize a 2D array to store the minimum operations for substrings
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize the first row and column of the table
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    # Fill the table using dynamic programming
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if grammar_rule[i - 1] == S[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j] + 1,     # Deletion
                               dp[i][j - 1] + 1,     # Insertion
                               dp[i - 1][j - 1] + 1) # Substitution

    # Return the minimum number of operations required
    return dp[m][n]


def main():
    S = input("Enter the input string: ")
    grammar_rule = input("Enter the grammar rule: ")
    
    min_ops = min_operations_to_correct(S, grammar_rule)
    print("Minimum operations required:", min_ops)


if __name__ == "__main__":
    main()
